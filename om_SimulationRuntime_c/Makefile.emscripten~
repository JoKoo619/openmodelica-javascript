# Adrian Pop, adrpo@ida.liu.se, 2006-02-01
# Makefile for compilation of OMC using OMDev-mingw
# OMDev-mingw: http://www.ida.liu.se/~adrpo/omc/omdev/

# The path to the OMDev-mingw package MUST BE SET!
#OMDEV=$OMDEV
# Test if the needed variables are there...

top_builddir = /home/tshort/openmodelica
builddir_bin=$(top_builddir)/build/bin
builddir_lib=$(top_builddir)/build/lib/omc
builddir_inc=$(top_builddir)/build/include/omc

AR = emar -ru
CC = emcc
FC = g77
#include the sundials, ipopt from OMDev and the top_builddir for revision.h
CONFIG_CFLAGS = -O2 \
#-I$(OMDEV)/lib/3rdParty/Ipopt/include/ \
#-I$(OMDEV)/lib/3rdParty/Sundials/include \
-I$(OMDEV)/include/lis -I$(top_builddir) \
-Wall -Wno-unused-variable 

# Not needed since we already set fpmath
FPMATHFORTRAN =

LIBMAKEFILE = Makefile.emscripten
INTERACTIVELIBS =
INTERACTIVECLIENT = "../interactive/SampleClient/interactiveclient"
CONFIG_H=$(top_builddir)/Compiler/runtime/config.h
LIBF2C=simulation/libf2c/libf2c.so
LIBF2CINC=-I./simulation/libf2c/
LIBF2CHEADER=./simulation/libf2c/f2c.h
LIBSIMULATION=libSimulationRuntimeC.so
LIBRUNTIME=libOpenModelicaRuntimeC.so
LIBFMIRUNTIME=libOpenModelicaFMIRuntimeC.so

##### Makefile.objs

#Files for meta folder
META_OBJS = \
meta_modelica_builtin.o \
meta_modelica_string_lit.o \
meta_modelica_segv.o \
realString.o \
meta_modelica.o \
meta_modelica_real.o \
gc/mmc_gc.o \
gc/common.o  \
gc/roots.o \
gc/generational.o  \
gc/marksweep.o

META_HFILES = \
rml_compatibility.h \
meta_modelica_builtin.h \
meta_modelica_builtin_boxptr.h \
meta_modelica_real.h \
meta_modelica_string_lit.h \
meta_modelica_segv.h \
meta_modelica.h \
gc/mmc_gc.h \
gc/common.h \
gc/generational.h \
gc/marksweep.h \
gc/roots.h


# Files for util functions
UTIL_OBJS = base_array.o boolean_array.o omc_error.o division.o generic_array.o index_spec.o integer_array.o java_interface.o list.o memory_pool.o modelica_string.o read_write.o read_matlab4.o real_array.o ringbuffer.o rtclock.o string_array.o utility.o varinfo.o ModelicaUtilities.o omc_msvc.o simulation_options.o tinymt64.o OldModelicaTables.o
UTIL_HFILES = base_array.h boolean_array.h division.h generic_array.h omc_error.h index_spec.h integer_array.h java_interface.h jni.h jni_md.h jni_md_solaris.h jni_md_windows.h list.h memory_pool.h modelica.h modelica_string.h read_write.h read_matlab4.h real_array.h ringbuffer.h rtclock.h string_array.h utility.h varinfo.h ModelicaUtilities.h simulation_options.h tinymt64.h

# Files for math-support
MATH_OBJS = bigden.o biglag.o daux.o ddasrt.o ddassl.o dlamch.o dlinpk.o dogleg.o dpmpar.o enorm.o fdjac1.o hybrd.o hybrd1.o hybrj.o lsame.o nelmead.o newuoa.o newuob.o  qform.o  qrfac.o r1mpyq.o r1updt.o trsapp.o update.o pivot.o
MATH_HFILES = blaswrap.h

# SOLVER_OBJS = dassl.o delay.o events.o model_help.o mixedSystem.o mixedSearchSolver.o kinsolSolver.o linearSystem.o linearSolverLapack.o linearSolverLis.o nonlinearSystem.o nonlinearSolverHybrd.o nonlinearSolverNewton.o solver_main.o stateset.o radau.o
SOLVER_OBJS = dassl.o delay.o events.o model_help.o mixedSystem.o mixedSearchSolver.o linearSystem.o linearSolverLapack.o linearSolverLis.o nonlinearSystem.o nonlinearSolverHybrd.o nonlinearSolverNewton.o solver_main.o stateset.o radau.o
SOLVER_HFILES = dassl.h delay.h events.h mixedSystem.h model_help.h solver_main.h linearSystem.h nonlinearSystem.h stateset.h radau.h

# INITIALIZATION_OBJS = initialization.o initialization_data.o method_ipopt.o method_kinsol.o method_newuoa.o method_simplex.o method_nelderMeadEx.o
INITIALIZATION_OBJS = initialization.o initialization_data.o method_ipopt.o method_newuoa.o method_simplex.o method_nelderMeadEx.o
# INITIALIZATION_HFILES = initialization.h initialization_data.h method_ipopt.h method_newuoa.h method_simplex.h method_nelderMeadEx.h
INITIALIZATION_HFILES = initialization.h initialization_data.h method_ipopt.h method_newuoa.h method_simplex.h method_nelderMeadEx.h

OPTIMIZATION_OBJS = initialOptimizer/allocate_ipopt.o initialOptimizer/initial_guess.o goal/evalF.o constraints/evalfDiffG.o constraints/evalfG.o mainOptimizer/ipoptODE.o
OPTIMIZATION_HFILES = interfaceOptimization.h

RESULTS_OBJS = read_csv.o simulation_result.o simulation_result_csv.o simulation_result_mat.o simulation_result_plt.o
RESULTS_HFILES = read_csv.h simulation_result.h simulation_result_csv.h simulation_result_mat.h simulation_result_plt.h
RESTULS_FILES = read_csv.cpp simulation_result_csv.cpp simulation_result_mat.cpp simulation_result_plt.cpp

SIM_OBJS = simulation_input_xml.o simulation_runtime.o ../linearization/linearize.o
SIM_OBJS_C = modelinfo.o simulation_info_xml.o options.o
SIM_HFILES = options.h simulation_input_xml.h simulation_info_xml.h modelinfo.h simulation_runtime.h ../linearization/linearize.h

FMI_OBJS = FMICommon.o FMI1Common.o FMI1ModelExchange.o FMI1CoSimulation.o FMI2Common.o FMI2ModelExchange.o

METAPATH = ./meta/
METAOBJSPATH = $(META_OBJS:%=$(METAPATH)%)
METAHFILESPATH = $(META_HFILES:%=$(METAPATH)%)

UTILPATH = ./util/
UTILOBJSPATH = $(UTIL_OBJS:%=$(UTILPATH)%)
UTILHFILESPATH = $(UTIL_HFILES:%=$(UTILPATH)%)

MATHPATH = ./math-support/
MATHOBJSPATH = $(MATH_OBJS:%=$(MATHPATH)%)
MATHHFILESPATH = $(MATH_HFILES:%=$(MATHPATH)%)

INITIALIZATIONPATH = ./simulation/solver/initialization/
INITIALIZATIONOBJSPATH = $(INITIALIZATION_OBJS:%=$(INITIALIZATIONPATH)%)
INITIALIZATIONHFILESPATH = $(INITIALIZATION_HFILES:%=$(INITIALIZATIONPATH)%)

OPTIMIZATIONPATH = ./optimization/
OPTIMIZATIONOBJSPATH = $(OPTIMIZATION_OBJS:%=$(OPTIMIZATIONPATH)%)
OPTIMIZATIONHFILESPATH = $(OPTIMIZATION_HFILES:%=$(OPTIMIZATIONPATH)%)

SOLVERPATH = ./simulation/solver/
SOLVEROBJSPATH = $(SOLVER_OBJS:%=$(SOLVERPATH)%)
SOLVERHFILESPATH = $(SOLVER_HFILES:%=$(SOLVERPATH)%)

RESULTSPATH = ./simulation/results/
RESULTSOBJSPATH = $(RESULTS_OBJS:%=$(RESULTSPATH)%)
RESULTSHFILESPATH = $(RESULTS_HFILES:%=$(RESULTSPATH)%)
RESULTSFILESPATH = $(RESULTS_FILES:%=$(RESULTSPATH)%)

SIMPATH = ./simulation/
SIMOBJSPATH = $(SIM_OBJS:%=$(SIMPATH)%)
SIMOBJSPATHC = $(SIM_OBJS_C:%=$(SIMPATH)%)
SIMHFILESPATH = $(SIM_HFILES:%=$(SIMPATH)%)

FMIPATH = ./fmi/
FMIOBJSPATH = $(FMI_OBJS:%=$(FMIPATH)%)

# ALL_OBJS = $(METAOBJSPATH) $(UTILOBJSPATH) $(MATHOBJSPATH) $(SOLVEROBJSPATH) $(INITIALIZATIONOBJSPATH) $(OPTIMIZATIONOBJSPATH) $(RESULTSOBJSPATH) $(SIMOBJSPATH) $(SIMOBJSPATHC) meta/meta_modelica_catch.o
ALL_OBJS = $(UTILOBJSPATH) $(MATHOBJSPATH) $(SOLVEROBJSPATH) $(INITIALIZATIONOBJSPATH) $(OPTIMIZATIONOBJSPATH) $(RESULTSOBJSPATH) $(SIMOBJSPATH) $(SIMOBJSPATHC) meta/meta_modelica_catch.o
ALL_HEADERS = $(METAHFILESPATH) $(UTILHFILESPATH) $(MATHHFILESPATH) $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(OPTIMIZATIONHFILESPATH) $(RESULTSHFILESPATH) $(SIMHFILESPATH)
# ALL_PATHS = $(METAPATH) $(UTILPATH) $(MATHPATH) $(SOLVERPATH) $(INITIALIZATIONPATH) $(OPTIMIZATIONPATH) $(RESULTSPATH) $(SIMPATH) linearization/
ALL_PATHS_CLEAN_OBJS = $(ALL_PATHS:%=%*.o) $(ALL_PATHS:%=%*.a) meta/gc/*.o

BASE_OBJS = $(METAOBJSPATH) $(UTILOBJSPATH) $(RESULTSOBJSPATH) meta/meta_modelica_catch.o

COMMON_HEADERS = simulation/libf2c/f2c.h util/omc_msvc.h openmodelica.h omc_inline.h openmodelica_func.h simulation_data.h

##### Makefile.common

CPPFLAGS = -I. -I$(UTILPATH) -I. -I$(METAPATH) -I$(METAPATH)gc $(LIBF2CINC) -I$(top_builddir)/3rdParty/gc-7.2/include -I$(top_builddir)/3rdParty/FMIL/install/include/ -I$(top_builddir)/3rdParty/lis-1.4.12/include/ $(CONFIG_CPPFLAGS) -DGC_REDIRECT_TO_LOCAL
CFLAGS = $(CPPFLAGS) $(CONFIG_CFLAGS) $(EXTRA_CFLAGS)
CXXFLAGS = $(CFLAGS)
FFLAGS  = -O -fexceptions
# P.A: before, g77 had -O3 or -O2 but that caused a bug in DDASRT, giving infinite loop.
builddir = /home/tshort/openmodelica/build

RUNTIME_HEADERS = $(LIBF2CHEADER) \
./omc_inline.h \
./math-support/blaswrap.h \
./meta/gc/common.h \
./meta/gc/mmc_gc.h \
./meta/gc/generational.h \
./meta/gc/marksweep.h \
./meta/gc/roots.h \
./meta/meta_modelica_builtin_boxptr.h \
./meta/meta_modelica_builtin.h \
./meta/meta_modelica.h \
./meta/meta_modelica_real.h \
./meta/meta_modelica_segv.h \
./meta/meta_modelica_string_lit.h \
./openmodelica_func.h \
./openmodelica.h \
./simulation_data.h \
./simulation/modelinfo.h \
./simulation/simulation_info_xml.h \
./simulation/simulation_runtime.h \
./simulation/solver/delay.h \
./simulation/solver/mixedSystem.h \
./simulation/solver/linearSystem.h \
./simulation/solver/model_help.h \
./simulation/solver/nonlinearSystem.h \
./simulation/solver/simulation_inline_solver.h \
./simulation/solver/stateset.h \
./simulation/results/simulation_result.h \
./util/ModelicaUtilities.h \
./util/base_array.h \
./util/boolean_array.h \
./util/division.h \
./util/generic_array.h \
./util/index_spec.h \
./util/integer_array.h \
./util/java_interface.h \
./util/memory_pool.h \
./util/modelica.h \
./util/modelica_string.h \
./util/omc_error.h \
./util/read_write.h \
./util/real_array.h \
./util/ringbuffer.h \
./util/rtclock.h \
./util/string_array.h \
./util/utility.h \
./util/varinfo.h \
./linearization/linearize.h \
./simulation/solver/perform_simulation.c \
./simulation/solver/omp_perform_simulation.c \
./optimization/interfaceOptimization.h \
./simulation/solver/dassl.h 


RUNTIME_HEADERS_FMU = \
./simulation/solver/initialization/initialization.h \
./simulation/solver/initialization/initialization_data.h \
./simulation/solver/events.h \
./simulation/solver/solver_main.h \
./util/list.h \

.PHONY : clean all $(LIBF2C)

all : install


#recompile all if a header changes!
$(ALL_OBJS) : $(ALL_HEADERS)

libSimulationRuntimeC.a: $(ALL_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(ALL_OBJS)

	ranlib $@

libSimulationRuntimeC.so: $(ALL_OBJS)
	@rm -f $@
	$(CC) -shared -o $@ $(ALL_OBJS)

libOpenModelicaRuntimeC.a: $(BASE_OBJS)
	@# You have to remove the old archive first or it may contain old objects
	@rm -f $@
	$(AR) $@ $(BASE_OBJS)
	ranlib $@

libOpenModelicaRuntimeC.so: $(BASE_OBJS)
	@rm -f $@
	$(CC) -shared -o $@ $(BASE_OBJS)

# libOpenModelicaFMIRuntimeC.a: $(FMIOBJSPATH)
# 	@rm -f $@
# 	$(AR) $@ $(FMILIB) $(FMIOBJSPATH)
# 	ranlib $@

# libOpenModelicaFMIRuntimeC.so: $(FMIOBJSPATH)
# 	@rm -f $@
# 	$(CC) -shared -o $@ $(FMIOBJSPATH)

# $(METAOBJSPATH):%.o: %.c $(METAHFILESPATH) $(COMMON_HEADERS)
# 	$(CC) -c $(CFLAGS) -o $@ $< -I$(METAPATH) -I$(UTILPATH)

# meta/meta_modelica_catch.o: meta/meta_modelica_catch.c
# 	$(CC) -c $(CFLAGS) -o $@ $< -g

$(UTILOBJSPATH):%.o: %.c $(UTILHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(UTILPATH) -I$(METAPATH)

$(MATHOBJSPATH):%.o: %.c $(MATHHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) $(FPMATHFORTRAN) -o $@ $< -I$(MATHPATH) -I$(UTILPATH)

$(SOLVEROBJSPATH):%.o: %.c $(SOLVERHFILESPATH) $(RESULTSHFILESPATH) $(INITIALIZATIONHFILESPATH) $(OPTIMIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(OPTIMIZATIONPATH) -I$(RESULTSPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH)

$(INITIALIZATIONOBJSPATH):%.o: %.c $(SOLVERHFILESPATH) $(INITIALIZATIONHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -I$(SIMPATH) -I$(MATHPATH) -I$(UTILPATH)

$(RESULTSOBJSPATH):%.o: $(RESULTSFILESPATH) $(COMMON_HEADERS)

$(SIMOBJSPATH):%.o: %.cpp linearization/linearize.cpp $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $< -I$(SIMPATH) -I$(UTILPATH) -I$(MATHPATH) -I$(RESULTSPATH) -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -Ilinearization/

$(SIMOBJSPATHC):%.o: %.c $(SIMHFILESPATH) $(COMMON_HEADERS)
	@echo Deps: $(SIMHFILESPATH) $(COMMON_HEADERS)
	$(CC) -c $(CFLAGS) -o $@ $< -I$(SIMPATH) -I$(UTILPATH) -I$(MATHPATH) -I$(RESULTSPATH) -I$(SOLVERPATH) -I$(INITIALIZATIONPATH) -Ilinearization/

ifeq ($(LIBF2C),)
simulation/libf2c/libf2c.a:
else
simulation/libf2c/libf2c.a:
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE}
endif

install: $(LIBSIMULATION) $(LIBRUNTIME) $(LIBFMIRUNTIME) simulation/libf2c/libf2c.a $(ALL_OBJS)
	# copy libraries
	cp -p $(LIBSIMULATION) $(LIBRUNTIME) $(LIBFMIRUNTIME) \
	   ../interactive/libinteractive.a $(builddir_lib)
	test -z "$(LIBF2C)" || cp simulation/libf2c/libf2c.* $(builddir_lib)/
	# copy interactive sample client
	cp $(INTERACTIVECLIENT) $(builddir_bin)
	# copy header files
	cp -p $(RUNTIME_HEADERS) $(builddir_inc)
	# copy fmi stuff
	cp -p $(RUNTIME_HEADERS_FMU) ../fmi/export/*.h \
	   ../fmi/export/fmu_model_interface.c \
	   ../fmi/import/fmuWrapper.h \
	   ../fmi/import/xmlparser.h $(builddir_inc)
	# copy java interface stuff
	@$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) && \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install || \
	$(MAKE) -C util/java_interface -f $(LIBMAKEFILE) install-nomodelica

clean:
	rm -f $(ALL_PATHS_CLEAN_OBJS) fmi/*.o *.a optimization/*/*.o
	$(MAKE) -C simulation/libf2c -f ${LIBMAKEFILE} clean
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) clean
	(! test -f $(EXTERNALCBUILDDIR)/Makefile) || make -C $(EXTERNALCBUILDDIR) distclean
